#!/bin/bash
#--------------------------------------------------------------------------
# spatch
#	Configuration manager for Home
#
#	Copyright (c) 2010-2012, Michael Paquier
#
#--------------------------------------------------------------------------

# First check the keyword used as command
COMMAND_TYPE=$1
# Take the number of arguments
NUM_ARGS=$#

# Default parameters
CONFIG_FOLDER=$HOME/.spatch.d # General config folder
CURRENT_CONFIG_FILE_MARKER=$CONFIG_FOLDER/current # Where is stored current config
VERSION="spatch version 1.0"

# List of files
FILES[0]=gitconfig_extra
FILES[1]=bash_extra
FILES[2]=bash_alias_extra

show_help ()
{
	echo "usage: `basename $0` [--version] [--help] <command> [args]";
	echo "";
	echo "The commands usable with `basename $0` are:";
	echo "   conf       Switch configuration set";
	echo "   conf-new   Create new configuration set";
	echo "   conf-rm    Remove configuration set";
	echo "   conf-list  List possible configuration sets";
	echo "   conf-desc  Describe given configuration set";
	echo "   conf-reset Reset current configuration";
	echo "   env        Switch environment";
	echo "   env-list   List available environments";
}

# Check number of arguments for command
# $1 = command type
# $2 = number of arguments
check_args ()
{
	COMMAND=$1
	NUM_ARGS=$2
	ERROR=0
	if [ "$COMMAND" = "conf" ]
	then
		# Here we need new config type
		if [ "$NUM_ARGS" -gt 2 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "env" ]
	then
		# We need new environment name
		if [ "$NUM_ARGS" -gt 2 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "env-list" ]
	then
		# Here we do not need extra arguments
		if [ "$NUM_ARGS" -gt 1 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "conf-list" ]
	then
		# Here we do not need extra arguments
		if [ "$NUM_ARGS" -gt 1 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "conf-desc" ]
	then
		# Here we need a config set as argument
		if [ "$NUM_ARGS" -gt 2 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "conf-new" ]
	then
		# Here we need a config set as argument
		if [ "$NUM_ARGS" -gt 2 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "conf-rm" ]
	then
		# Here we need a config set as argument
		if [ "$NUM_ARGS" -gt 2 ]
		then
			ERROR=1
		fi
	elif [ "$COMMAND" = "conf-reset" ]
	then
		# No argument needed here
		if [ "$NUM_ARGS" -gt 1 ]
		then
			ERROR=1
		fi
	fi

	if [ "$ERROR" = 1 ]
	then
		# Report error
		echo "Incorrect number of arguments"
		# Show help in case of error and leave
		show_help
		exit 1
	fi
}

# Execute command conf-new
command_confnew()
{
	NEW_CONF=$1

	# Check definition existence
	if [ -z $NEW_CONF ]
	then
		echo "No configuration defined"
		exit 1
	fi

	# Check if already exists
	if [ -d $CONFIG_FOLDER/$NEW_CONF ]
	then
		echo "Configuration already existing"
		exit 1
	fi

	# Now create the new configuration
	echo "Created new configuration $NEW_CONF"
	cp -r $CONFIG_FOLDER/default $CONFIG_FOLDER/$NEW_CONF
}

# Execute command conf-rm
command_confrm()
{
	OLD_CONF=$1

	# Check definition existence
	if [ -z $OLD_CONF ]
	then
		echo "No configuration defined"
		exit 1
	fi

	# Block removal of configuration default
	if [ $OLD_CONF = "default" -o $OLD_CONF = "example" ]
	then
		echo "Cannot remove configuration $OLD_CONF"
		exit 1
	fi

	# Check if really exists
	if [ ! -d $CONFIG_FOLDER/$NEW_CONF ]
	then
		echo "Configuration not existing"
		exit 1
	fi

	# Now remove the configuration
	echo "Remove configuration $OLD_CONF"
	rm -r $CONFIG_FOLDER/$OLD_CONF
}

# Execute command conf-list
command_conflist ()
{
	CURRENT_FOLDER=`get_current_conf_name`

	for folder in `ls $CONFIG_FOLDER`
	do
		if [ "$CURRENT_FOLDER" = "$folder" ]
		then
			PREFIX="*"
		else
			PREFIX=" "
		fi

		# Print only the folder names
		if [ -d "$CONFIG_FOLDER/$folder" ]
		then
			echo "$PREFIX $folder"
		fi
	done
}

# Execute command conf-desc
command_confdesc ()
{
	CONFIG_NAME=$1

	# If name is empty, fallback to current
	if [ -z "$CONFIG_NAME" ]
	then
		CONFIG_NAME=`get_current_conf_name`
	fi

	# Error if still empty
	if [ -z "$CONFIG_NAME" ]
	then
		echo "No configuration set found"
		exit 1
	fi

	# Now we are sure that the current configuration has been read or that
	# There is a configuration defined, but we are not sure if it exists,
	# So check it.
	if [ ! -d $CONFIG_FOLDER/$CONFIG_NAME ]
	then
		echo "Incorrect configuration set"
		exit 1
	fi

	DESC_FILE=$CONFIG_FOLDER/$CONFIG_NAME/DESCRIPTION
	# Check presence of a description file
	if [ ! -f $DESC_FILE ]
	then
		echo "No description available"
		exit 1
	fi

	# OK now print description of configuration set
	echo `cat $DESC_FILE`
}

# Execute command conf-reset
command_confreset ()
{
	# Get current configuration name and check existence
	CURRENT_CONF=`get_current_conf_name`

	if [ -z $CURRENT_CONF ]
	then
		echo "No configuration found, forcing reset"
	else
		echo "Removing configuration $CURRENT_CONF"
	fi

	# Remove all the files if they exit
	for file in ${FILES[@]}
	do
		if [ -h $HOME/.$file ]
		then
			echo "Removed link $file"
			rm $HOME/.$file
		fi
	done

	# Delete current configuration file marker
	if [ -f $CURRENT_CONFIG_FILE_MARKER ]
	then
		rm $CURRENT_CONFIG_FILE_MARKER
	fi
}

# Get current configuration name
get_current_conf_name ()
{
	# Be sure that current config exists or return null
	if [  -f "$CURRENT_CONFIG_FILE_MARKER" ]
	then
		echo `cat $CURRENT_CONFIG_FILE_MARKER`
	fi
}

# Execute command conf
command_conf ()
{
	NEW_CONF=$1

	# Error if no new conf defined
	if [ -z $NEW_CONF ]
	then
		echo "No configuration defined"
		exit 1
	fi

	# Check presence of new configuration
	if [ ! -d $CONFIG_FOLDER/$NEW_CONF ]
	then
		echo "Invalid configuration $NEW_CONF, no configuration files"
		exit 1
	fi

	# Then remove old configuration
	command_confreset

	# Link to the new objects
	for file in ${FILES[@]}
	do
		echo "Linking $HOME/.$file to $CONFIG_FOLDER/$NEW_CONF/$file"
		ln -s $CONFIG_FOLDER/$NEW_CONF/$file $HOME/.$file
	done

	# Create current marker
	echo $NEW_CONF > $CURRENT_CONFIG_FILE_MARKER
}


# Execute command env
command_env ()
{
	NEW_ENV=$1
	if [ -z $NEW_ENV ]
	then
		echo "Environment not specified"
		show_help
		exit 1
	fi

	# OK to switch environment
	cd $HOME
	git checkout $NEW_ENV > /dev/null 2>&1
	ERROR=$?
	if [ "$ERROR" = 0 ]
	then
		echo "Switched to environment $NEW_ENV"
	else
		echo "Incorrect environment $NEW_ENV"
	fi
}

command_envlist ()
{
	echo "List of Home environments:"
	cd $HOME
	git branch
}

# Check the list of arguments
check_args $COMMAND_TYPE $NUM_ARGS

if [ "$COMMAND_TYPE" = "conf" ]
then
	command_conf $2
elif [ "$COMMAND_TYPE" = "--version" ]
then
	echo $VERSION
elif [ "$COMMAND_TYPE" = "--help" ]
then
	show_help
elif [ "$COMMAND_TYPE" = "env" ]
then
	command_env $2
elif [ "$COMMAND_TYPE" = "env-list" ]
then
	command_envlist
elif [ "$COMMAND_TYPE" = "conf-new" ]
then
	command_confnew $2
elif [ "$COMMAND_TYPE" = "conf-rm" ]
then
	command_confrm $2
elif [ "$COMMAND_TYPE" = "conf-list" ]
then
	command_conflist
elif [ "$COMMAND_TYPE" = "conf-desc" ]
then
	command_confdesc $2
elif [ "$COMMAND_TYPE" = "conf-reset" ]
then
	command_confreset
else
	# Report incorrect command
	echo "Incorrect command"
	# Show help and return error
	show_help
	exit 1
fi

exit 0
