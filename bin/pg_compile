#!/bin/bash
#--------------------------------------------------------------------------
# pg_compile
#	Copy and compile PostgreSQL or Postgres-XC code
#	Copyright (c) 2010-2017, Michael Paquier
#
#	The code used for compilation is a copy of an original code.
#--------------------------------------------------------------------------

# Immediately leave in case of failure and avoid using unassigned
# variables.
set -eu

# Take and check options
EXPECTED_ARGS=0
FLAG_CONFIGURE=0
FLAG_PATH=0
FLAG_BRANCH=0
FLAG_MAKEFILE=0
# Code copy flags
FLAG_SRC_FOLDER=0
FLAG_TAG=0

# Show help
show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -c       Leave after configure"
	echo "  -h       Show this help"
	echo "  -p PATH  Define installation folder"
	echo "  -s FLAG  Choose custom Makefile.custom. This file is located"
	echo "           in $HOME_POSTGRES_ETC and named as Makefile.$FLAG.custom."
	echo "           Default is \"dev\"."
	echo " "
	echo "Code synchronization options"
	echo "  -b BRANCH"
	echo "           Sync source code with latest point of given branch"
	echo "  -o REMOTE"
	echo "           Name of the remote to sync branches with. Value is"
	echo "           ignored if no branches are specified."
	echo "  -t SHA1 or TAG"
	echo "           Sync output code up to given Git tag or commit"
	echo "           If nothing is specified current code of"
	echo "           input directory is used. This gives priority"
	echo "           to commit/tag so modified code is removed."

	exit $ERROR_NUM
}

# Update local Git repository to commit or tag
update_code_to_commit()
{
	UPDATE_TO_COMMIT=$1

	# First check if given entry given by user is a valid tag
	CHECKED_COMMIT_ID=`git show-ref --hash $UPDATE_TO_COMMIT`
	RES=$?
	if [ "$RES" != 0 ]; then
		echo "$UPDATE_TO_COMMIT is not a valid tag, falling back to SHA1 commit check"
		CHECKED_COMMIT_ID=$UPDATE_TO_COMMIT
	fi

	# Now check if the converted commit exists, in the case of a tag already
	# validated, this cannot happen, but the 1st step might fail, so double
	# check
	git log $CHECKED_COMMIT_ID &> /dev/null
	RES=$?
	if [ "$RES" != 0 ]; then
		echo "$UPDATE_TO_COMMIT is not a valid commit ID"
		exit $RES
	fi

	echo "Aligning code with commit $CHECKED_COMMIT_ID"

	# Store existing code if any
	git stash -q
	git stash clear &> /dev/null

	# Clean up as well any useless files for have a clean tree
	git clean -d -x -f

	# Now create a temporary branch that will be used for compilation
	git branch tmp_$UPDATE_TO_COMMIT $CHECKED_COMMIT_ID &> /dev/null
	git checkout tmp_$UPDATE_TO_COMMIT &> /dev/null
}

# Update local Git repository to latest point of given branch
# This could actually use update_code_to_commit but it looks cleaner
# to check if the branch specified actually exists and then check it out
# without creating a new one.
update_code_to_branch()
{
	UPDATE_TO_BRANCH=$1
	UPDATE_TO_REMOTE=$2

	git show-ref --quiet $UPDATE_TO_BRANCH
	RES=$?
	# Branch does not exist
	if [ "$RES" != 0 ]; then
		echo "$UPDATE_TO_BRANCH is not an existing local branch"
		exit $RES
	fi

	echo "Aligning code with latest commit in branch $UPDATE_TO_BRANCH"

	# Store existing code if any
	git stash -q
	git stash clear &> /dev/null

	# Clean up as well any useless files for have a clean tree
	git clean -d -x -f

	# Then checkout the stuff
	git checkout $UPDATE_TO_BRANCH &> /dev/null

	# Update to latest point defined by remote
	git merge $UPDATE_TO_REMOTE/$UPDATE_TO_BRANCH
}

# Default values
USER_GIT_REMOTE="origin"

#Treat options
while getopts 'b:cho:p:s:t:' OPTION
do
	case $OPTION in
	b)	# Branch to sync code with
		FLAG_BRANCH=1
		USER_GIT_BRANCH="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	c)	# Only configure
		FLAG_CONFIGURE=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	h)	# Help
		show_help 0
		;;
	o)	# Remote to sync branches with
		USER_GIT_REMOTE="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	p)	# Installation folder
		FLAG_PATH=1
		USER_INSTALL_FOLDER="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	s)	# Custom Makefile
		FLAG_MAKEFILE=1
		USER_MAKEFILE="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	t)	# Get code up to tag or commit ID
		FLAG_TAG=1
		USER_GIT_COMMIT_TAG="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	?)	# Help
		show_help 1
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]; then
	show_help 1
fi

# Branch and commit specifications cannot be used at the same time
if [ "$FLAG_TAG" == 1 -a "$FLAG_BRANCH" == 1 ]; then
	echo "Cannot specify both branch and commit/tag specification"
	exit 1
fi

# Set input folder value
if [ "$FLAG_SRC_FOLDER" == 1 ]; then
	PSQL_SRC_FOLDER=$USER_INPUT_FOLDER
else
	# Use global source folder as default
	PSQL_SRC_FOLDER=$HOME_POSTGRES_SRC
	echo "Using default input folder $PSQL_SRC_FOLDER"
fi

# Define installation folder
if [ "$FLAG_PATH" == 1 ]; then
	PSQL_INSTALL_FOLDER=$USER_INSTALL_FOLDER
else
	# Use global install folder as default
	PSQL_INSTALL_FOLDER=$HOME_POSTGRES_INSTALL
	echo "Using default installation folder $PSQL_INSTALL_FOLDER"
fi

# Guard against ripping once an entire server if this is not set as previous
# installations are simply deleted.
if [ -z "$PSQL_INSTALL_FOLDER" ]; then
	echo "Installation folder undefined"
	exit 1
fi

# Copy custom Makefile
if [ "$FLAG_MAKEFILE" == 1 ]; then
	CUSTOM_MAKEFILE=$HOME_POSTGRES_ETC/Makefile.$USER_MAKEFILE.custom
	# Check its existence
	if [ ! -f $CUSTOM_MAKEFILE ]; then
		echo "Custom Makefile $CUSTOM_MAKEFILE does not exist"
		exit 1
	fi
	echo "Using custom Makefile $CUSTOM_MAKEFILE"
else
	# Use default instead
	CUSTOM_MAKEFILE=$HOME_POSTGRES_ETC/Makefile.dev.custom
	echo "Using default custom Makefile $CUSTOM_MAKEFILE"
fi

# Copy file in source tree before running coonfigure
cp $CUSTOM_MAKEFILE $HOME_POSTGRES_SRC/src/Makefile.custom

# Get commit of current HEAD for custom version string
GIT_CURRENT=`cd $HOME_POSTGRES_SRC && git rev-parse --short HEAD`

# General options for configure, used for all builds
CONFIGURE_OPTIONS+="--prefix=$PSQL_INSTALL_FOLDER "
CONFIGURE_OPTIONS+="--with-extra-version=-$GIT_CURRENT "

# Specify number of cores to use for compilation
if [[ $HOME_ENV_NAME == MINGW* ]]; then
	# MinGW
	NUM_CORES=1
elif [[ $HOME_ENV_NAME == Darwin ]]; then
	NUM_CORES=`sysctl -n hw.ncpu`
else
	# Linux/Unix
	NUM_CORES=`nproc`
fi

# Perform configure, build and installation, here calling configure from
# the local folder is enough.
cd $PSQL_SRC_FOLDER

# Configure folder is the base folder of git tree
CONFIGURE_CALL_FOLDER=`git rev-parse --show-toplevel`

# Update code to given tag if necessary
if [ "$FLAG_TAG" == 1 ]; then
	update_code_to_commit $USER_GIT_COMMIT_TAG
fi
# Update code to given branch
if [ "$FLAG_BRANCH" == 1 ]; then
	update_code_to_branch $USER_GIT_BRANCH $USER_GIT_REMOTE
fi

# Move to base folder of git tree to not trigger VPATH install
cd $CONFIGURE_CALL_FOLDER

# Check availability of ccache to improve compilation
set +e
which ccache > /dev/null 2>&1
ERR_NUM=$?
set -e
if [ $ERR_NUM != 0 ]; then
	FLAG_CCACHE=0
else
	FLAG_CCACHE=1
fi

# Ensure that ccache folder is created
if [ ! -d $HOME_CCACHE_DIR ]; then
	mkdir -p $HOME_CCACHE_DIR
fi

# Kick configure
if [ "$FLAG_CCACHE" == 1 ]; then
	# Error out on windows, ccache is not available there. Note that we
	# should never get there.
	if [[ $HOME_ENV_NAME == MINGW* ]]; then
		echo "ccache is not available on Windows"
		exit 1
	fi
	./configure CC="ccache gcc" CCACHE_DIR=$HOME_CCACHE_DIR \
				CFLAGS="$HOME_POSTGRES_CFLAGS" \
				LDFLAGS="$HOME_POSTGRES_LDFLAGS" \
				$CONFIGURE_OPTIONS $HOME_POSTGRES_CONFIGURE

else
	# Platform-specific configure commands
	# It happens that enforcing those variables fixes a couple of
	# compilation issues with MinGW.
	if [[ $HOME_ENV_NAME == MINGW* ]]; then
		PERL="perl" BISON="bison" FLEX="flex" \
			MKDIR_P="mkdir -p" \
			./configure CFLAGS="$HOME_POSTGRES_CFLAGS" \
						LDFLAGS="$HOME_POSTGRES_LDFLAGS" \
						$CONFIGURE_OPTIONS $HOME_POSTGRES_CONFIGURE
	else
		./configure CFLAGS="$HOME_POSTGRES_CFLAGS" \
					LDFLAGS="$HOME_POSTGRES_LDFLAGS" \
					$CONFIGURE_OPTIONS $HOME_POSTGRES_CONFIGURE
	fi
fi

# Before installation, change SHELL calls in Makefile Global,
# It seems to be the only correct way to do that with MinGW.
# This has at least the merit to make pass all the install-sh
# calls.
if [[ $HOME_ENV_NAME == MINGW* ]]; then
	sed -i "s#\$(SHELL)#bash#g" src/Makefile.global
fi

# If only configure has been requested, leave now
if [ "$FLAG_CONFIGURE" == 1 ]; then
	echo "Only configure has been requested, leaving..."
	exit 0
fi

# Compile...
make -j $NUM_CORES

# Before installing anything, rip off completely the existing installation.
# This avoids game dependencies for example with header files across major
# versions.
rm -rf $PSQL_INSTALL_FOLDER/*

# Install main components
make install

# Install contrib modules
cd contrib/
make install
