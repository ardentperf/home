#!/bin/bash
#--------------------------------------------------------------------------
# pg_start
#	Start a PostgreSQL cluster
#	Copyright (c) 2010-2013, Michael Paquier
#
#	The cluster is built using postgres_* infrastructure of Home.
#--------------------------------------------------------------------------

# Take and check options
EXPECTED_ARGS=0
NUM_SLAVES=0
FLAG_CASCADING=0
FLAG_PATH=0
FLAG_VERSION=0

# Show utility help
show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -c                  Cascading replication"
	echo "  -h                  Show this help"
	echo "  -p PATH             Path to Postgres install folder"
	echo "                      The same folder is used to store data folders"
	echo "  -s number_slaves    Choose number of slaves behind a node"
	echo "  -v                  Output installation version and leave"
	exit $ERROR_NUM
}

# Check installation for given folder
check_install()
{
	PSQL_INSTALL_PATH=$1

	# Check presence of bin
	if [ ! -d $PSQL_INSTALL_PATH/bin ]
	then
		echo "Missing folder $PSQL_INSTALL_PATH/bin in installation"
		exit 1
	fi
	# Check presence of lib
	if [ ! -d $PSQL_INSTALL_PATH/lib ]
	then
		echo "Missing folder $PSQL_INSTALL_PATH/lib in installation"
		exit 1
	fi
	# Check presence of share
	if [ ! -d $PSQL_INSTALL_PATH/share ]
	then
		echo "Missing folder $PSQL_INSTALL_PATH/share in installation"
		exit 1
	fi
	# Check presence of lib
	if [ ! -d $PSQL_INSTALL_PATH/include ]
	then
		echo "Missing folder $PSQL_INSTALL_PATH/include in installation"
		exit 1
	fi
}

# Show installation version and leave
show_version()
{
	PSQL_INSTALL_PATH=$1

	# Check that postgres binary exists
	if [ ! -x $PSQL_INSTALL_PATH/bin/postgres ]
	then
		echo "Unexisting $PSQL_INSTALL_PATH/bin/postgres binary"
		echo "You should check your installation"
		exit 1
	fi

	# Output version
	echo `$PSQL_INSTALL_PATH/bin/postgres --version`
	exit 0
}

# Treat options
while getopts 'chp:s:v' OPTION
do
	case $OPTION in
	c)	# Cascading - single layer
		FLAG_CASCADING=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	h)  # Show this help
		show_help 0
		;;
	p)	# Path to postgres install folder
		FLAG_PATH=1
		PSQL_USER_PATH="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	s)	# Number of slaves attached to the main node
		NUM_SLAVES="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	v)	# Version output
		FLAG_VERSION=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	?)	#Leave without an error code
		show_help 0
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]
then
	# Leave with an error code
	show_help 1
fi

# Stop cascading for the time being
if [ "$FLAG_CASCADING" == 1 ]
then
	echo "Cascading is not yet supported"
	exit 1
fi

#Set default PSQL install folder to the one wanted by user
if [ "$FLAG_PATH" == 1 ]
then
	PSQL_FOLDER=$PSQL_USER_PATH
else
	# Set up default
	PSQL_FOLDER=$HOME_POSTGRES_INSTALL
	echo "Installation folder set to default $PSQL_FOLDER"
fi

# Check installation on this folder
check_install $PSQL_FOLDER

# Show up version if requested
if [ "$FLAG_VERSION" == 1 ]
then
	show_version $PSQL_FOLDER
fi

# Initialize the master node
MASTER_PORT=`postgres_get_port`
echo "Master node will listen at port $MASTER_PORT"
MASTER_DATA=$PSQL_FOLDER/node_$MASTER_PORT
postgres_node_init -p $MASTER_PORT -d $MASTER_DATA -b $PSQL_FOLDER

# Slaves need the base backup of master first, so start it
postgres_node_ctl -d $MASTER_DATA -b $PSQL_FOLDER -a start

# Wait for start up a bit, for automatic port detection
sleep 1

# Now initialize and start the slaves if any
if [ "$NUM_SLAVES" -gt 0 ]
then
	for i in $(seq 1 $NUM_SLAVES)
	do
		SLAVE_DATA=$PSQL_FOLDER/node_$SLAVE_PORT
		SLAVE_PORT=`postgres_get_port`
		postgres_node_init -d $SLAVE_DATA -p $SLAVE_PORT -q $MASTER_PORT -s \
			-b $PSQL_FOLDER
		postgres_node_ctl -d $SLAVE_DATA -b $PSQL_FOLDER -a start

		# Wait a bit for startup, due to automatic port detection
		sleep 1
	done
fi

echo "Creating database $USER"
$PSQL_FOLDER/bin/createdb $USER -p $MASTER_PORT

# Output result
exit `echo $?`
