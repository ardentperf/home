#!/bin/bash
#--------------------------------------------------------------------------
# postgres_node_init
#	Initialize a new Postgres node, either standby or master.
#	Copyright (c) 2010-2013, Michael Paquier
#
#	Either a master or a standby can be created using this script. As this
#	script is planned to be used with Home only, there is no possibility
#	to set up a foreign host name, all the nodes are running on the local
#	server. If a standby is created, its related master needs to be alive
#	such as a base backup is taken. Port, data folder and branch name
#	need to be given by the	caller. The return result of this script is
#	the creation status of the node. A standby is connected to master using
#	asynchronous streaming replication, and this script just adds the
#	necessary configuration to do that.
#
#	Note that this script can be used also for cascading replication
#	as a root node could be as well another standby.
#
#	Here only the initialization is done. The node will need to be
#	launched afterwards by the caller. This is important because in some
#	test you might want to start a standby with a certain delay.
#
#	When a standby node is created, the application name of the node is
#	harcoded the port it listens to:
#	- node_$PORT
#	This makes things clear regarding what connects to what.
#
#	In the settings, WAL archiving is enabled.
#--------------------------------------------------------------------------

# Option check flags
FLAG_PATH=0
FLAG_DATA_FOLDER=0
FLAG_PORT=0
FLAG_STANDBY=0
FLAG_ROOT_PORT=0
EXPECTED_ARGS=0

show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -b PATH         Path to Postgres install folder"
	echo "  -d DATA_FOLDER  Data folder of the node"
	echo "  -h              Show this help and leave"
	echo "  -p PORT			Port of the node"
	echo "  -q MASTER_PORT  Port of root node this standby needs to use"
	echo "  -s              Create a standby"
	exit $ERROR_NUM
}

# Read options
while getopts 'b:d:hp:q:s' OPTION
do
	case $OPTION in
	b)	# Path to point to Postgres binaries
		PSQL_USER_PATH="$OPTARG"
		FLAG_PATH=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	d)	# Data folder of the new node
		FLAG_DATA_FOLDER=1
		NODE_DATA_FOLDER="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	h)	# Show this help
		show_help 1
		;;
	p)	# Port of the new node
		FLAG_PORT=1
		NODE_PORT="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	q)	# Port of the root node if standby is created
		FLAG_ROOT_PORT=1
		ROOT_PORT="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	s)	# Flag for standby creation
		FLAG_STANDBY=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	?)	# Leave with an error code
		show_help 1
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]
then
	# Leave with an error code
	show_help 1
fi

# Perform safety checks
# Specifying a port is mandatory
if [ "$FLAG_PORT" == 0 ]
then
	echo "Specifying a port is mandatory"
	show_help 1
	exit 1
fi
# Specifying a data folder is mandatory
if [ "$FLAG_DATA_FOLDER" == 0 ]
then
	echo "Specifying a data folder is mandatory"
	show_help 1
	exit 1
fi
# If a standby is wanted, specifying a root node port is mandatory
if [ "$FLAG_STANDBY" == 1 -a "$FLAG_ROOT_PORT" == 0 ]
then
	echo "Specifying a root node port is mandatory when creating a standby"
	show_help 1
	exit 1
fi
# Cannot specify a root node port if no standby is wanted
if [ "$FLAG_STANDBY" == 0 -a "$FLAG_ROOT_PORT" == 1 ]
then
	echo "No root port can be specified if a master is created"
	show_help 1
	exit 1
fi

#Set default PSQL install folder to the one wanted by user
if [ "$FLAG_PATH" == 1 ]
then
	PSQL_FOLDER=$PSQL_USER_PATH
else
	# Set up default
	PSQL_FOLDER=$HOME_POSTGRES_INSTALL
	echo "Installation folder set to default $PSQL_FOLDER"
fi

# Some environment variables
PSQL_BIN=$PSQL_FOLDER/bin
INITDB=$PSQL_BIN/initdb

# Folder for archives
ARCHIVE_DATA=$PSQL_FOLDER/archive
# Current node archive folder
NODE_ARCHIVE=$ARCHIVE_DATA/node_$NODE_PORT
# Enforce creation of new archive folder for node
if [ -d $NODE_ARCHIVE ]
then
	rm -r $NODE_ARCHIVE
fi
mkdir $NODE_ARCHIVE

# If new node is a standby, fetch archives from root node
if [ $FLAG_STANDBY == 1 ]
then
	ROOT_ARCHIVE=$ARCHIVE_DATA/node_$ROOT_PORT
fi

# Generic options for postgresql.conf, replication parameters are set by
# default for consistency among nodes and simplification of standby creation
OPTIONS_POSTGRESQL="logging_collector = on\n"\
"log_statement = 'all'\n"\
"log_min_messages = debug1\n"\
"log_min_error_statement = debug1\n"\
"log_autovacuum_min_duration = -1\n"\
"max_prepared_transactions = 20\n"\
"max_wal_senders = 10\n"\
"hot_standby = on\n"\
"wal_level = hot_standby\n"\
"archive_mode = on\n"\
"archive_command = 'cp -i %p $NODE_ARCHIVE/%f'\n"\
"work_mem = 1MB\n"

# Options of pg_hba.conf to allow replication
OPTIONS_PGHBA="host replication $USER 127.0.0.1/32 trust\n"\
"host replication $USER ::1/128 trust\n"\
"local replication $USER trust\n"

# Parameters for recovery.conf, used only if node is a standby
OPTIONS_STANDBY_RECOVERY="restore_command = 'cp -i $ROOT_ARCHIVE/%f %p'\n"\
"standby_mode = on\n"\
"recovery_target_timeline = 'latest'\n"\
"primary_conninfo = 'host=localhost port=$ROOT_PORT application_name=node_$NODE_PORT'\n"

# Enforce deletion of data folder if it exists
if [ -d $NODE_DATA_FOLDER ]
then
	echo "Data folder $NODE_DATA_FOLDER exists, enforcing its removal"
	rm -rf $NODE_DATA_FOLDER
fi

# Create a master node
if [ "$FLAG_STANDBY" == 0 ]
then
	# Initialize the data folder of this node
	$INITDB -D $NODE_DATA_FOLDER

	# Set postgresql.conf
	echo -e $OPTIONS_POSTGRESQL >> $NODE_DATA_FOLDER/postgresql.conf

	# Set up pg_hba.conf with replication settings. For a standby this
	# is taken with pg_basebackup. No archives are used
	echo -e $OPTIONS_PGHBA >> $NODE_DATA_FOLDER/pg_hba.conf
else
	# Initialize a standby with a fresh base backup
	pg_basebackup -p $ROOT_PORT -D $NODE_DATA_FOLDER

	# Set recovery.conf
	echo -e $OPTIONS_STANDBY_RECOVERY >> $NODE_DATA_FOLDER/recovery.conf
fi

# Enforce the port number of the standby, this setting is added at the bottom
# of postgresql.conf, this way it will be enforced to this new value.
echo "port = $NODE_PORT" >> $NODE_DATA_FOLDER/postgresql.conf

# Node started safely
exit 0
