#!/bin/bash
#--------------------------------------------------------------------------
# git-terminal-status
#	Print information about current GIT repository on screen.
#	Copyright (c) 2010-2014, Michael Paquier
#
#	Information about current branch, as well as status can be
#	printed. This is dedicated to PS1 and is let in a script
#	to allow more complicated manipulations depending on environments
#	by not adding complications to .bashrc.
#--------------------------------------------------------------------------

# Check if output should be printed when loading this script
if [ "$1" == "--offline" ]
then
	OFFLINE_OUTPUT=1
else
	OFFLINE_OUTPUT=0
fi

# Check the existence of a GIT command
function __git_terminal_status()
{
	which git &> /dev/null
	RES=$?

	# Initialize output
	GIT_BRANCH=
	if [ "$RES" == 0 ]
	then
		RES_WORKING_TREE="false"
		# Check if current repository is a GIT repository
		git rev-parse --git-dir &> /dev/null
		RES=$?

		# Check working tree presence
		if [ "$RES" == 0 ]
		then
			# OK, we are inside a GIT repository, now check if
			# it is a working tree or not
			RES_WORKING_TREE=`git rev-parse --is-inside-work-tree`
		fi

		if [ "$RES_WORKING_TREE" == "true" ]
		then
			# Check if repository is a bare one
			# Such repositories have no status so no real work branch
			CORE_BARE=`git config core.bare`
			if [ "$CORE_BARE" == "true" ]
			then
				GIT_BRANCH="(bare-repo)"
				GIT_BRANCH=${HOME_COLOR_BLACK_BOLD}${GIT_BRANCH}${HOME_COLOR_OFF}
				export GIT_PS1_STATUS="$GIT_BRANCH"
				return
			fi

			# Fetch currently checked-out branch
			GIT_BRANCH_NAME="$(git symbolic-ref HEAD 2>/dev/null)" ||
			GIT_BRANCH_NAME="(unnamed branch)"
			GIT_BRANCH_NAME=${GIT_BRANCH_NAME##refs/heads/}

			# Print current branch and its status, note that
			# this operation cannot be run on a bare tree
			git status | grep "nothing to commit" > /dev/null 2>&1
			NOTHING_TO_COMMIT=$?
			if [ "$NOTHING_TO_COMMIT" == 0 ]
			then
				GIT_BRANCH_STATUS="OK"
			else
				GIT_BRANCH_STATUS="X"
			fi

			# Put parenthesis around all the information
			GIT_BRANCH="($GIT_BRANCH_NAME $GIT_BRANCH_STATUS)"

			# Finally add colors if necessary, OSX does not like system colors
			# so simply disable them in this case.
			ENV_NAME=`uname`
			if [ "$ENV_NAME" != "Darwin" ]
			then
				# Blue if OK, Red if not
				if [ "$NOTHING_TO_COMMIT" == 0 ]
				then
					GIT_BRANCH=${HOME_COLOR_BLUE_BOLD}${GIT_BRANCH}${HOME_COLOR_OFF}
				else
					GIT_BRANCH=${HOME_COLOR_RED_BOLD}${GIT_BRANCH}${HOME_COLOR_OFF}
				fi
			fi
		fi
	fi

	# Finally export the result
	export GIT_PS1_STATUS="$GIT_BRANCH"
}

# Print output only if requested. The offline mode is used when loading this
# script, generally at session loading.
if [ $OFFLINE_OUTPUT == 0 ]
then
	__git_terminal_status

	# Do not print "\n" if output is empty
	if [ ! -z "$GIT_PS1_STATUS" ]
	then
		echo $GIT_PS1_STATUS
	fi
fi
