#!/bin/bash
#--------------------------------------------------------------------------
# redis_start
#	Start a Redis cluster
#	Copyright (c) 2010-2012, Michael Paquier
#
#	Build a Redis cluster from scratch. Slaves can be called on demand.
#--------------------------------------------------------------------------

# Take and check options
EXPECTED_ARGS=0
NUM_SLAVES=0
FLAG_PATH=0
FLAG_VERSION=0

# Show utility help
show_help()
{
	ERROR_NUM=$1
	echo "Usage: `basename $0` [OPTION]..."
	echo " "
	echo "Options:"
	echo "  -h                  Show this help"
	echo "  -p PATH             Path to Redis install folder"
	echo "                      The same folder is used to store data folders"
	echo "  -s number_slaves    Choose number of slaves behind a master node"
	echo "  -v                  Output installation version and leave"
	exit $ERROR_NUM
}

# Check installation for given folder
check_install()
{
	REDIS_INSTALL_PATH=$1

	# Check presence of bin
	if [ ! -d $REDIS_INSTALL_PATH/bin ]
	then
		echo "Missing folder $REDIS_INSTALL_PATH/bin in installation"
		exit 1
	fi
}

# Enfore folder creation
enforce_create_folder()
{
	REDIS_NEW_FOLDER=$1

	# Enforce folder creation
	if [ -d $REDIS_NEW_FOLDER ]
	then
		echo "Deleting directory $REDIS_NEW_FOLDER"
		rm -r $REDIS_NEW_FOLDER
	fi

	# Now create the new folder
	echo "Creating new log directory $REDIS_NEW_FOLDER"
	mkdir $REDIS_NEW_FOLDER
}

# Show installation version and leave
show_version()
{
	REDIS_INSTALL_PATH=$1

	# Check that redis binary exists
	if [ ! -x $REDIS_INSTALL_PATH/bin/redis-server ]
	then
		echo "Unexisting $REDIS_INSTALL_PATH/bin/redis-server binary"
		echo "You should check your installation"
		exit 1
	fi

	# Output version
	echo `$REDIS_INSTALL_PATH/bin/redis-server --version`
	exit 0
}

# Treat options
while getopts 'hp:s:v' OPTION
do
	case $OPTION in
	h)  # Show this help
		show_help 0
		;;
	p)	# Path to redis install folder
		FLAG_PATH=1
		REDIS_USER_PATH="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	s)	# Number of slaves attached to the main node
		NUM_SLAVES="$OPTARG"
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 2))
		;;
	v)	# Version output
		FLAG_VERSION=1
		EXPECTED_ARGS=$(($EXPECTED_ARGS + 1))
		;;
	?)	#Leave without an error code
		show_help 0
		;;
	esac
done

# Check number of arguments
if [ $# -ne $EXPECTED_ARGS ]
then
	# Leave with an error code
	show_help 1
fi

# Setup Default values
# Master port begins at $MASTER_PORT_START
# Slave ports begin at $SLAVE_PORT_START
# All the machines run on local host
MASTER_PORT=6379
SLAVE_PORT_START=6380
SLAVE_PORTS[1]=$SLAVE_PORT_START
for i in $(seq 1 $NUM_SLAVES)
do
	SLAVE_PORTS[$i]=$(($SLAVE_PORT_START + $i))
done

# Set default REDIS install folder to the one wanted by user
if [ "$FLAG_PATH" == 1 ]
then
	REDIS_FOLDER=$REDIS_USER_PATH
else
	# Set up default
	REDIS_FOLDER=$HOME_REDIS_INSTALL
	echo "Installation folder set to default $REDIS_FOLDER"
fi

# Check installation on this folder
check_install $REDIS_FOLDER

# Show up version if requested
if [ "$FLAG_VERSION" == 1 ]
then
	show_version $REDIS_FOLDER
fi

# Finish calculating dependencies between folders
REDIS_BIN=$REDIS_FOLDER/bin
REDIS_LOG=$REDIS_FOLDER/log
REDIS_DATA=$REDIS_FOLDER/data

# Delete existing directories if any
enforce_create_folder $REDIS_LOG
enforce_create_folder $REDIS_DATA

# Calculate the data folders of master and each slave
# Those folders are used to store logs and database snapshots.
REDIS_DATA_MASTER=$REDIS_DATA/master
enforce_create_folder $REDIS_DATA_MASTER
for i in $(seq 1 $NUM_SLAVES)
do
	REDIS_DATA_SLAVE[$i]=$REDIS_DATA/slave$i
	enforce_create_folder ${REDIS_DATA_SLAVE[$i]}
done

# Kill all the processes that may remain
# in the most atrocious way possible as they meritated it
# OK this is not very clean but here the goal is efficiency...
echo "Take out Redis processes"
killall redis-server redis-cli > /dev/null 2>&1
sleep 2

# Dump files are generated in folder where redis-server is launched
cd $REDIS_DUMP

# Launch master node
echo "launching master..."
COMMAND="$REDIS_BIN/redis-server "\
"--dir $REDIS_DATA_MASTER "\
"--logfile log.txt "\
"--port $MASTER_PORT &"
eval $COMMAND
sleep 2

# Launch slaves if any
if [ "$NUM_SLAVES" -gt 0 ]
then
	#Launch Slaves one by one
	echo "launching Slave nodes..."
	for i in $(seq 1 $NUM_SLAVES)
	do
		REDIS_LOCAL_FOLDER=${REDIS_DATA_SLAVE[$i]}
		REDIS_LOCAL_PORT=${SLAVE_PORTS[$i]}

		# Build and launch the command
		COMMAND="$REDIS_BIN/redis-server "\
"--dir $REDIS_LOCAL_FOLDER "\
"--logfile log.txt --port $REDIS_LOCAL_PORT "\
"--slaveof 127.0.0.1 $MASTER_PORT &"
		eval $COMMAND
	done
fi

exit 0
